package text_test

import (
	"testing"

	"github.com/corvus-ch/horcrux/format"
	formatAssert "github.com/corvus-ch/horcrux/format/internal/assert"
	"github.com/corvus-ch/horcrux/format/text"
	"github.com/stretchr/testify/assert"
)

var nameTests = []formatAssert.NameTest{
	{0, "mollis", "mollis.txt.000"},
	{1, "commodo", "commodo.txt.001"},
	{42, "pellentesque", "pellentesque.txt.042"},
	{181, "fringilla", "fringilla.txt.181"},
	{254, "venenatis", "venenatis.txt.254"},
	{255, "ridiculus", "ridiculus.txt.255"},
}

var dataTests = []formatAssert.DataTest{
	{[]byte{240, 191, 199}, "   1: 6n9hq BF444A\n   2: BF444A\n"},
	{[]byte{212, 122, 4}, "   1: 4t7ye 7008A1\n   2: 7008A1\n"},
	{[]byte{0xff}, "   1: 9h 78D648\n   2: 78D648\n"},
	{[]byte{0xb5}, "   1: sw 37CA82\n   2: 37CA82\n"},
	{[]byte{0x34, 0x5a}, "   1: gtpy 358F66\n   2: 358F66\n"},
	{[]byte{0xff, 0xff, 0xff, 0xff, 0xff}, "   1: 99999 999 302370\n   2: 302370\n"},
	{[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, "   1: 99999 9999h 9AD7E3\n   2: 9AD7E3\n"},
	{[]byte{
		0xc0, 0x73, 0x62, 0x4a, 0xaf, 0x39, 0x78, 0x51,
		0x4e, 0xf8, 0x44, 0x3b, 0xb2, 0xa8, 0x59, 0xc7,
		0x5f, 0xc3, 0xcc, 0x6a, 0xf2, 0x6d, 0x5a, 0xaa,
	}, "   1: ab3sr 1ix8f hfnuz aeo75 fkn3a 7xh8u dk6js iiko 039DEA\n   2: 039DEA\n"},
	{[]byte{
		0x19, 0xa7, 0xec, 0xf4, 0x03, 0x2f, 0x7d, 0xb8, 0x1d, 0x32, 0x2b, 0x50, 0x36, 0xb3, 0xfd, 0x6c,
		0xb2, 0xbb, 0xbd, 0x4a, 0xe7, 0x44, 0x7f, 0x0f, 0x97, 0x76, 0x74, 0x74, 0xb5, 0x20, 0x4a, 0xd5,
		0xe0, 0x5f, 0xbd, 0x8c, 0x75, 0xe1, 0x58, 0x62, 0x10, 0x35, 0xa4, 0xc3, 0x3d, 0xaf, 0xe5, 0x85,
		0x66, 0x64, 0x48, 0x48, 0x5b, 0xbb, 0x8d, 0xa2, 0x71, 0x1f, 0x8b, 0x18, 0xe4, 0x45, 0x37, 0xa4,
		0xd2, 0xca, 0xf2, 0x87, 0x88, 0x63, 0xdd, 0xd2, 0x7f, 0xbd, 0x46, 0x88, 0x1b, 0x99, 0x2e, 0x64,
		0xec, 0xe9, 0xda, 0xf1, 0x1b, 0x79, 0x95, 0xca, 0x67, 0xc1, 0x5e, 0xbb, 0xc7, 0x64, 0x48, 0xde,
		0xa8, 0xa1, 0xd7, 0x30, 0xc7, 0xc7, 0x94, 0x97, 0x3e, 0xc3, 0x87, 0x83, 0x17, 0xe9, 0xb6, 0x33,
		0xb9, 0x9d, 0x4f, 0x51, 0x51, 0x59, 0xf7, 0x91, 0xe2, 0xe5, 0x5b, 0xbb, 0x8a, 0x5b, 0xea, 0x18,
		0xed, 0x00, 0x48, 0xaa, 0x67, 0x80, 0x3d, 0x3d, 0xb3, 0x59, 0xa5, 0x58, 0xab, 0x14, 0xf4, 0x5b,
		0x40, 0xce, 0xb4, 0xcf, 0x65, 0xc8, 0x1f, 0xb7, 0x0e, 0x5b, 0x83, 0x12, 0x8a, 0xf9, 0x9d, 0x7a,
		0x4a, 0x5f, 0x6c, 0xd8, 0xba, 0x5b, 0x72, 0x52, 0xf5, 0x6d, 0xfc, 0x7b, 0x8a, 0xdf, 0x13, 0x30,
		0x6c, 0x63, 0x51, 0x31, 0x80, 0xce, 0xb7, 0x57, 0xb7, 0x24, 0x8d, 0xbf, 0x31, 0xd6, 0xd6, 0x4f,
		0x0e, 0xaf, 0x5b, 0xb9, 0x20, 0xa8, 0xc0, 0x26, 0xe6, 0xb2, 0xbe, 0xf2, 0x5f, 0xc4, 0xc7, 0xee,
		0x44, 0xfe, 0xb7, 0xf8, 0x60, 0x6f, 0xf9, 0x1d, 0x2b, 0x38, 0xb8, 0x42, 0xf5, 0xa6, 0xf1, 0x5e,
		0xd4, 0x43, 0x25, 0x3a, 0xcf, 0xf4, 0x50, 0xc2, 0x52, 0x65, 0xf0, 0x91, 0xb3, 0x1f, 0xf3, 0xab,
		0xef, 0x66, 0x69, 0x3c, 0x2a, 0x05, 0xf4, 0x94, 0xcb, 0x20, 0x19, 0x2c, 0x01, 0xe7, 0x81, 0xd6,
		0xee, 0xb6, 0x56, 0xff, 0x16, 0xa7, 0xec, 0x64, 0x1a, 0x9e, 0x5b, 0x75, 0x36, 0x10, 0x02, 0x57,
		0x75, 0x4f, 0x16, 0x28, 0x4b, 0x38, 0x76, 0x35, 0x7c, 0xa6, 0x50, 0xc0, 0x45, 0x83, 0x7f, 0xa4,
		0xca, 0x4d, 0x6e, 0xfd, 0xb7, 0xa3, 0x87, 0x6b, 0x26, 0x95, 0xa1, 0xda, 0x7c, 0x29, 0x02, 0x25,
		0xba, 0xc9, 0xd6, 0x79, 0xdc, 0x34, 0x16, 0x04, 0xb6, 0x2a, 0x52, 0x71, 0x62, 0x8d, 0x32, 0x07,
		0x97, 0xf4, 0x84, 0x46, 0x8a, 0xf8, 0x5e, 0x33, 0x35, 0xef, 0x50, 0x7c, 0xfb, 0xbc, 0xa6, 0x74,
		0xbb, 0x22, 0x43, 0x7e, 0x43, 0xb0, 0x7b, 0x84, 0xb6, 0x57, 0xa2, 0x49, 0x21, 0x47, 0x24, 0x7a,
		0x30, 0x8d, 0xbf, 0xf5, 0xd8, 0xc1, 0x75, 0x6e, 0x9c, 0xeb, 0xd0, 0xbf, 0xbe, 0x12, 0xb2, 0x25,
		0x44, 0x83, 0xc9, 0x36, 0x92, 0xff, 0x91, 0x13, 0x22, 0x71, 0xe4, 0xe0, 0xa7, 0xd7, 0x2b, 0x20,
		0x5e, 0xa0, 0x73, 0x47, 0x7a, 0x75, 0x02, 0xcd, 0xc1, 0xe9, 0x8e, 0xa0, 0xad, 0x74, 0x26, 0x45,
		0xb3, 0x83, 0xad, 0xae, 0x79, 0xd1, 0x61, 0x6f, 0xea, 0x17, 0x49, 0xcd, 0x7f, 0xc7, 0x8f, 0xad,
		0xc1, 0xd9, 0x5a, 0xa7, 0x32, 0xd4, 0x0b, 0xfc, 0x4d, 0x55, 0x52, 0x67, 0x26, 0x65, 0x71, 0x37,
		0x7e, 0x3a, 0x29, 0x39, 0xe6, 0x95, 0x63, 0x82, 0x72, 0xca, 0x59, 0x94, 0x55, 0x88, 0x4f, 0x38,
		0x17, 0xa6, 0xfd, 0x77, 0xfa, 0x7e, 0xd0, 0xee, 0x5e, 0xae, 0x30, 0x48, 0x52, 0xaa, 0x5e, 0x65,
		0x0b, 0xbd, 0x02, 0x1b, 0xa7, 0xf3, 0x0f, 0xc0, 0x9a, 0xda, 0x70, 0x79, 0xdf, 0x1e, 0x22, 0x65,
		0xcd, 0xb6, 0xfe, 0x24, 0x00, 0xa5, 0x3d, 0x24, 0x19, 0x32, 0x19, 0xb2, 0xb1, 0xde, 0x0f, 0xaa,
		0x4c, 0x65, 0xa8, 0x82, 0xb9, 0x0e, 0x72, 0xc6, 0x71, 0x69, 0xe6, 0x6d, 0x9d, 0x19, 0xa8, 0xdd,
	}, `   1: dgu63 7ydf7 65o8j 1fped pc97p 13mzx kkh7n 86dhz q348j pjyjm DFA978
   2: k6yz7 7tt46 nsdnn y44jo 37i91 ak3ur jbrfz qhpwj at9na ahtnu E9AA47
   3: xjg13 m3exn dd5zj 89xkg typ31 mur7u w7ihe 5xgkh w36bm 47hq3 AEB17C
   4: ne54w kdi3o a9d3j f36aq dagf9 jsa35 u8kxk feiu7 hthm1 izqhk 659F29
   5: mxibt 5eyjn igxyb 78s3i ujkai ckxes 4y344 c63qe d65oh shdnk 9CAEE1
   6: fxu8m 4jjxs 3sf4m p3ff7 mp9t7 aizau gbsgg wjtod 8mqi7 zr1g5 B2AEA1
   7: 6cqs4 38o7m 45zro ktobg h43m7 h19au d6ht8 6s9hg y593d wiutq 896437
   8: nn6su xnzsw ec1ui u9wkd bfr3x o1g3t 9h7m7 7ug1x bkyz4 jj13y F8532D
   9: drsyd 3hb45 zmciz 9n4u6 a3y4u 3pzkp ooyjm zkuas fbfuo 7tix1 22BF18
  10: ufbon fop94 j11pp 565xe h8pcu jmeq4 xowor jp438 m8uzb wnanm A20BAC
  11: ck11q fte4c o8194 eetwk 9bxdg pxxkb 6xzxf gq171 ro56e qa8zb 5AF890
  12: fsk6t r1ek8 rt7db dp96z ccn7m quui7 bx76n k3nkt rd3r5 jf9ht 66755D
  13: nct8d 38yw9 m1sen 6wb3w q6uiy mghd4 cqwns zej1f sqb45 mu34f EB388D
  14: os94o zj8gz 9thxi zy71s i8gmk yz9np kijgq jufqr 5zhqt j88uj 2DFE2D
  15: kahnq mffuf nitb8 uof7g 9i59w 9so73 xkhcn ekkif h3emz wbbzj 65EF4C
  16: 9ub9y jisuo x8xth euf3s 5xhjy yww61 egj1d g3mdz oxijg gmkrn 908A03
  17: zr88f tutp8 ug58e 3idqo 6C81C7
  18: 6C81C7
`},
}

func factory(s string) format.Format {
	return text.New(s)
}

func TestFormat_OutputFileName(t *testing.T) {
	formatAssert.Name(t, nameTests, factory)
}

func TestFormat_Reader(t *testing.T) {
	formatAssert.DataRead(t, dataTests, factory)
}

func TestFormat_Writer(t *testing.T) {
	formatAssert.DataWrite(t, dataTests, factory)
}

func TestFormat_Name(t *testing.T) {
	assert.Equal(t, text.Name, text.New("").Name())
}
