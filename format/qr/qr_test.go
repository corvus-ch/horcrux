package qr_test

import (
	"bytes"
	"crypto/md5"
	"crypto/rand"
	"fmt"
	"github.com/sebdah/goldie"
	"io"
	"io/ioutil"
	"testing"

	"github.com/corvus-ch/horcrux/format"
	formatAssert "github.com/corvus-ch/horcrux/format/internal/assert"
	"github.com/corvus-ch/horcrux/format/qr"
	"github.com/stretchr/testify/assert"
)

var nameTests = []formatAssert.NameTest{
	{0, "mollis", "mollis.000.png"},
	{1, "commodo", "commodo.001.png"},
	{42, "pellentesque", "pellentesque.042.png"},
	{181, "fringilla", "fringilla.181.png"},
	{254, "venenatis", "venenatis.254.png"},
	{255, "ridiculus", "ridiculus.255.png"},
}

var dataTests = []struct {
	data []byte
}{
	{[]byte{0}},
	{[]byte{0xff}},
	{[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff}},
	{[]byte{
		0xc0, 0x73, 0x62, 0x4a, 0xaf, 0x39, 0x78, 0x51,
		0x4e, 0xf8, 0x44, 0x3b, 0xb2, 0xa8, 0x59, 0xc7,
		0x5f, 0xc3, 0xcc, 0x6a, 0xf2, 0x6d, 0x5a, 0xaa,
	}},
	{[]byte{
		0x05, 0xee, 0xa2, 0x82, 0x8b, 0x45, 0x3b, 0xf3, 0x07, 0x8b, 0x49, 0x17, 0x5c, 0x18, 0x68, 0xac,
		0xbf, 0x73, 0xc0, 0xc5, 0x4f, 0x68, 0x66, 0x66, 0xde, 0x84, 0x80, 0x16, 0xb2, 0x77, 0xd6, 0xa6,
		0xd5, 0x3f, 0xe6, 0xa2, 0x0c, 0x2f, 0x2f, 0xde, 0xef, 0xc9, 0x83, 0xd0, 0x76, 0x23, 0x29, 0x4e,
		0xec, 0x21, 0x59, 0x85, 0xb1, 0xbd, 0x52, 0xe3, 0x13, 0x38, 0x32, 0x32, 0xac, 0xb8, 0x6b, 0x06,
		0xa9, 0xda, 0xf8, 0x29, 0xd4, 0x18, 0x6a, 0x2b, 0x1e, 0x16, 0x1e, 0x23, 0x81, 0xf0, 0x47, 0xe1,
		0x05, 0xdc, 0x5a, 0x15, 0xfd, 0xe4, 0xb3, 0xc1, 0xf5, 0x08, 0xbf, 0x13, 0x92, 0xe7, 0x7e, 0x57,
		0xad, 0x3d, 0xde, 0x77, 0xd6, 0x1b, 0x8a, 0x46, 0x20, 0x28, 0x4f, 0x94, 0x30, 0x84, 0xea, 0x7c,
		0x7d, 0x56, 0xf9, 0x3e, 0x5c, 0x34, 0x2b, 0x41, 0x96, 0x8a, 0xac, 0x24, 0xc8, 0x5e, 0x3c, 0xac,
		0xc6, 0xff, 0x10, 0xdd, 0xa6, 0xb5, 0xc8, 0x6c, 0x5a, 0xed, 0x47, 0x2c, 0xb6, 0x30, 0xc6, 0xd4,
		0x3c, 0xe4, 0x42, 0x8f, 0x57, 0x5c, 0x2b, 0xcf, 0x56, 0xfc, 0xbd, 0x33, 0x72, 0x74, 0xaa, 0x9a,
		0xd3, 0xb4, 0x0f, 0x58, 0x72, 0x65, 0x89, 0x88, 0x1b, 0x83, 0x90, 0xfb, 0x8c, 0x62, 0xc9, 0x8a,
		0x9a, 0xc2, 0xfe, 0x02, 0xc0, 0xcf, 0x14, 0x83, 0x6f, 0x19, 0x67, 0xac, 0x59, 0x98, 0x09, 0x17,
		0x4e, 0x80, 0x8f, 0x3a, 0xa2, 0x0c, 0x4c, 0x8d, 0x9c, 0x03, 0xd3, 0x87, 0x76, 0xfd, 0x42, 0xed,
		0xd4, 0x19, 0xb7, 0x18, 0x01, 0x63, 0x70, 0x8d, 0xa6, 0x7d, 0x03, 0x12, 0x3e, 0x79, 0xd9, 0x8a,
		0xd2, 0x3b, 0x87, 0x28, 0x7d, 0x1e, 0x71, 0xbf, 0x69, 0x26, 0x19, 0xcb, 0xea, 0x9c, 0x88, 0x0b,
		0xba, 0xd4, 0x92, 0x51, 0x2d, 0x74, 0x64, 0x08, 0x29, 0x8a, 0x27, 0x82, 0xe7, 0xf8, 0x91, 0x0d,
		0xf9, 0x22, 0x20, 0x9e, 0x0e, 0x5d, 0x9e, 0x52, 0xbd, 0xf7, 0xea, 0xc7, 0x04, 0x8e, 0x61, 0x71,
		0xe0, 0x5e, 0xb9, 0xcb, 0xb5, 0x37, 0x32, 0x50, 0x64, 0x20, 0x20, 0x60, 0xb3, 0x26, 0x23, 0x8d,
		0xc9, 0x8d, 0xd3, 0xf1, 0xc8, 0x4a, 0xee, 0xb1, 0x28, 0x25, 0x15, 0x40, 0xf1, 0xdc, 0x50, 0xcd,
		0x5d, 0x7d, 0xab, 0x82, 0x79, 0x41, 0xe2, 0xf2, 0xd5, 0xf0, 0xc1, 0xb9, 0xd3, 0x15, 0x9d, 0x2a,
		0xc2, 0x60, 0x29, 0x26, 0x1b, 0x51, 0xd1, 0x7a, 0xc8, 0x36, 0xf1, 0xfe, 0x21, 0xce, 0xa2, 0x94,
		0x7f, 0x75, 0xb3, 0xae, 0x00, 0xb1, 0xa2, 0x6c, 0xab, 0x02, 0x7b, 0x70, 0xb9, 0x9e, 0x7f, 0xe2,
		0xc2, 0xca, 0x80, 0x71, 0x09, 0x15, 0xf0, 0x9c, 0xf3, 0xdb, 0x17, 0x0f, 0xa0, 0x98, 0x7a, 0x2d,
		0x01, 0x17, 0x57, 0x01, 0xb7, 0x37, 0xec, 0xcd, 0xc4, 0x03, 0x85, 0xbb, 0x3a, 0x11, 0xdb, 0xfb,
		0x20, 0x5b, 0x52, 0xbd, 0x28, 0x03, 0xb9, 0x6f, 0xde, 0x69, 0x91, 0x42, 0x78, 0x24, 0xa9, 0x7a,
		0x7f, 0x17, 0xbc, 0x56, 0xf6, 0x1c, 0x81, 0x0b, 0x2b, 0x0c, 0x8e, 0x8e, 0x35, 0x40, 0x6c, 0x64,
		0xb7, 0x27, 0x79, 0x4e, 0xb8, 0x6a, 0x93, 0x62, 0x4a, 0xc1, 0xbb, 0xfa, 0xea, 0xb3, 0xd8, 0xe3,
		0xa0, 0xba, 0xbe, 0x2d, 0x83, 0xb3, 0x3d, 0xf6, 0xd6, 0xae, 0xcb, 0x85, 0x71, 0x1a, 0xf8, 0x9c,
		0x4f, 0x01, 0x0c, 0xc7, 0x5b, 0xfd, 0x1c, 0x36, 0xa6, 0x99, 0xcc, 0x35, 0x51, 0x31, 0xa4, 0x0a,
		0x46, 0xc5, 0xfb, 0xbf, 0x92, 0x95, 0xd0, 0xa8, 0x2b, 0xf3, 0x04, 0x1d, 0x4f, 0x74, 0x19, 0x94,
		0xe6, 0xfb, 0x75, 0x08, 0x9f, 0x26, 0xba, 0x4f, 0x83, 0xa2, 0x7d, 0x82, 0x31, 0xfc, 0xf0, 0x4d,
		0xe0, 0x41, 0x00, 0xc3, 0x15, 0x6d, 0x59, 0xea, 0x72, 0x2a, 0x5a, 0x2c, 0x52, 0xb7, 0x26, 0x96,
		0x91, 0x01, 0x4b, 0x66, 0xdf, 0x54, 0xa7, 0x68, 0x08, 0x06, 0x15, 0xde, 0x2c, 0x3e, 0x6d, 0x96,
		0xa2, 0xd2, 0x86, 0xfc, 0x0d, 0x4d, 0x71, 0xaa, 0xb4, 0xf0, 0x92, 0x28, 0xb8, 0xaa, 0x7a, 0xb9,
		0x08, 0x5f, 0x1e, 0xa6, 0x53, 0xcf, 0xa2, 0xf0, 0x6b, 0x16, 0xed, 0x97, 0x8c, 0x2c, 0x8e, 0xf8,
		0x84, 0x17, 0x44, 0x72, 0xe0, 0x99, 0x55, 0x8a, 0x7c, 0xdd, 0x19, 0x6e, 0xc9, 0x63, 0x37, 0x69,
		0xf8, 0x4d, 0x7c, 0xcb, 0xa0, 0x6c, 0x56, 0xdd, 0x57, 0x35, 0x22, 0x20, 0xef, 0xbc, 0xdb, 0x7a,
		0xbb, 0xab, 0x92, 0x2a, 0xc0, 0x44, 0x12, 0x1d, 0x7b, 0x6b, 0x35, 0xb1, 0x5c, 0xc5, 0x1e, 0xc7,
		0xd3, 0x4a, 0xbe, 0x4a, 0x20, 0xd4, 0x38, 0xd9, 0x67, 0xbe, 0x8c, 0x43, 0xe4, 0x13, 0x3a, 0x75,
		0x65, 0x0a, 0x7b, 0x3b, 0x82, 0xe9, 0x2b, 0x78, 0xf6, 0x6b, 0x63, 0xd1, 0xa3, 0x9c, 0x93, 0x42,
		0xe9, 0x7c, 0x4f, 0xe7, 0x57, 0x6b, 0xbf, 0xa9, 0x4b, 0xde, 0x0b, 0xa3, 0x8b, 0xb0, 0xf2, 0x90,
		0x05, 0xd0, 0x6e, 0x7a, 0x65, 0x6c, 0x3e, 0x76, 0xcb, 0x97, 0xac, 0x49, 0x1a, 0x15, 0xd2, 0x18,
		0x71, 0xba, 0xb7, 0x14, 0x8c, 0xea, 0xc2, 0x18, 0x22, 0xc6, 0xf9, 0xa9, 0x31, 0x3a, 0x9d, 0x81,
		0x4f, 0xb8, 0xd9, 0xb9, 0xba, 0xdd, 0x33, 0x51, 0x63, 0xb8, 0x26, 0x6d, 0xc5, 0x8c, 0xc8, 0xed,
		0x12, 0xe5, 0xb2, 0xc3, 0x4a, 0xc7, 0x07, 0x8e, 0x20, 0xb8, 0x16, 0x83, 0x1f, 0x44, 0xe1, 0xa7,
		0x52, 0x0b, 0x44, 0x10, 0x29, 0x30, 0x53, 0xde, 0xf1, 0x89, 0x8e, 0x2a, 0x7a, 0x3c, 0x5f, 0x07,
		0xcd, 0xcb, 0x2f, 0x4d, 0x0e, 0xa7, 0x03, 0xec, 0x26, 0x45, 0x4c, 0x0d, 0x33, 0xdc, 0x88, 0xd2,
		0xd2, 0xd6, 0x7a, 0x6e, 0x42, 0xc9, 0x29, 0xf5, 0x15, 0xfa, 0xf6, 0xf2, 0xf0, 0x6e, 0x32, 0x2c,
		0x3f, 0x73, 0xf3, 0x98, 0xe1, 0x23, 0x8e, 0x90, 0x15, 0x84, 0x85, 0xf6, 0x53, 0x96, 0x1c, 0x92,
		0xb4, 0x76, 0x6d, 0x32, 0xa3, 0x7f, 0x96, 0x51, 0x4d, 0x12, 0x90, 0x42, 0x62, 0x14, 0xba, 0x33,
		0x62, 0x6e, 0xae, 0x0e, 0xb8, 0x5d, 0x68, 0xd3, 0xb5, 0xc5, 0xfa, 0xb2, 0x43, 0x43, 0xfe, 0x6b,
		0xf9, 0xdd, 0x2b, 0x5d, 0xfa, 0xc2, 0x7e, 0x70, 0x30, 0x63, 0xb5, 0xd1, 0x2a, 0xca, 0xd8, 0x3d,
		0x53, 0x7b, 0xb5, 0x7a, 0x6f, 0x7e, 0xe9, 0xc8, 0x68, 0x5c, 0xd3, 0x02, 0x0e, 0xaf, 0x1c, 0x12,
		0x87, 0x75, 0x96, 0x3d, 0x9d, 0xd3, 0x70, 0xaa, 0xda, 0x93, 0x19, 0x3e, 0x28, 0x6d, 0xba, 0x20,
		0x78, 0xd3, 0xc5, 0x37, 0x3e, 0x90, 0xa2, 0x73, 0x52, 0xfc, 0xf2, 0x1e, 0xc2, 0xac, 0xb7, 0x3d,
		0x06, 0xc4, 0x0d, 0xbc, 0x09, 0x93, 0xb0, 0x86, 0xbd, 0x94, 0x59, 0x0f, 0xa5, 0x9a, 0xe4, 0xff,
		0xd8, 0x11, 0x6a, 0x47, 0x2a, 0x8d, 0xcf, 0x15, 0x0a, 0x76, 0x74, 0x08, 0xe3, 0x7c, 0xa1, 0x2a,
		0x7d, 0xe9, 0x92, 0xe3, 0xfe, 0x84, 0xa4, 0x0b, 0xab, 0x5a, 0x83, 0x87, 0x24, 0x05, 0xd9, 0x7f,
		0x37, 0x60, 0xd3, 0xd9, 0x93, 0x4e, 0x3d, 0x67, 0x05, 0xc7, 0x1d, 0x6d, 0xb3, 0xd7, 0xc4, 0x36,
		0x63, 0x83, 0xe7, 0x22, 0x09, 0x8b, 0xbe, 0xf5, 0x5b, 0x24, 0x80, 0xf2, 0x5c, 0x33, 0x49, 0x2a,
		0x5b, 0xcc, 0xb8, 0xc5, 0x9b, 0x8f, 0x29, 0xb8, 0x04, 0x4d, 0xed, 0x4c, 0xe0, 0x88, 0x57, 0x02,
		0xf8, 0x32, 0x39, 0x12, 0x85, 0x06, 0xa4, 0xf4, 0xd8, 0xce, 0x9a, 0xa3, 0x24, 0xa7, 0x4a, 0x1e,
		0x49, 0x19, 0x0f, 0xb3, 0xe3, 0x6f, 0x39, 0x6d, 0x1f, 0x5e, 0x28, 0x8a, 0x8d, 0xca, 0x9a, 0xbf,
		0x7c, 0x1b, 0xba, 0x6b, 0xe9, 0xd7, 0xb4, 0xda, 0xed, 0x4d, 0xb7, 0x60, 0x64, 0x5e, 0x8a, 0x56,
		0x82, 0x94, 0x79, 0x9c, 0x5c, 0xcd, 0x45, 0xf4, 0x85, 0x02, 0x15, 0xbb, 0x3d, 0xc0, 0x8d, 0x18,
		0x77, 0x92, 0x50, 0x05, 0xfb, 0x39, 0xd4, 0x5e, 0x1f, 0xa3, 0xbf, 0x9d, 0x58, 0xcc, 0x32, 0x4f,
		0x4e, 0x87, 0xb2, 0xbb, 0x3e, 0xa7, 0x31, 0x00, 0x44, 0xf3, 0xba, 0x75, 0x9f, 0x63, 0x39, 0x4d,
		0xd9, 0xbf, 0x3f, 0x34, 0xf3, 0x3a, 0xe8, 0x1e, 0xfa, 0x20, 0x6b, 0xeb, 0xbe, 0x38, 0xdb, 0xee,
		0x70, 0x96, 0x36, 0x97, 0x95, 0x37, 0xfc, 0x4c, 0x32, 0x26, 0xdd, 0x19, 0xfc, 0xf1, 0xf2, 0x37,
		0xb2, 0x2d, 0x58, 0xf9, 0x76, 0x1b, 0xa4, 0xd6, 0xc6, 0x84, 0x95, 0x9e, 0x75, 0xb4, 0x5f, 0xb8,
		0x0f, 0x5e, 0x3c, 0x09, 0xcf, 0xa8, 0x80, 0xe0, 0x2b, 0x8b, 0x60, 0x06, 0x7c, 0x29, 0x48, 0x91,
		0x16, 0x17, 0xfa, 0x06, 0xec, 0x86, 0xb2, 0xe8, 0x75, 0xa8, 0x23, 0x18, 0xa5, 0x0a, 0xc7, 0x79,
		0xce, 0xd0, 0x80, 0x2b, 0x7e, 0xa4, 0xdc, 0x1a, 0x9d, 0x2b, 0x70, 0x40, 0x3a, 0x4c, 0xc6, 0x85,
		0x4f, 0x6e, 0xab, 0xcb, 0x8d, 0x96, 0x6d, 0x94, 0x02, 0x2e, 0xc6, 0x4c, 0x41, 0x23, 0xe7, 0x1c,
		0xe7, 0x39, 0x81, 0xfd, 0x8f, 0xca, 0x87, 0x73, 0xce, 0x44, 0xbb, 0x4b, 0x55, 0x3e, 0xc6, 0x79,
		0xa5, 0xa5, 0x8a, 0x47, 0xfc, 0x14, 0x94, 0x19, 0x92, 0x0e, 0xd7, 0x9e, 0x9f, 0xd3, 0xe2, 0xcb,
		0x10, 0x36, 0xa4, 0xe0, 0x07, 0x2f, 0x83, 0xeb, 0x18, 0x38, 0x5a, 0x86, 0x09, 0x5b, 0x63, 0x79,
		0x40, 0x04, 0x4d, 0xab, 0xf2, 0x42, 0xde, 0x54, 0x11, 0x15, 0x16, 0x19, 0xa8, 0x6d, 0x3f, 0xdc,
		0xc3, 0x13, 0x01, 0x10, 0x0a, 0x7b, 0x55, 0x64, 0xf8, 0xc2, 0x2f, 0xec, 0x8f, 0xb7, 0x4a, 0xc2,
		0x55, 0x8e, 0xfc, 0xc2, 0x8e, 0xc5, 0xb6, 0xf9, 0x2c, 0x58, 0x52, 0x28, 0x49, 0xe3, 0xef, 0x45,
		0x7d, 0xbf, 0x6f, 0x87, 0xba, 0xe5, 0x3f, 0x19, 0x6b, 0x9d, 0x5e, 0xd0, 0xec, 0xae, 0x87, 0x43,
		0x6e, 0x70, 0x94, 0xd0, 0x48, 0xd7, 0xba, 0xf3, 0x94, 0x30, 0x3e, 0x2e, 0xcd, 0x14, 0x3a, 0x01,
		0x8e, 0x6b, 0x33, 0xae, 0x6f, 0xa8, 0xd6, 0x0e, 0xf4, 0xd3, 0xa3, 0xb9, 0x56, 0x83, 0xa6, 0x1e,
		0xef, 0x16, 0xe3, 0x8e, 0x90, 0x37, 0xba, 0xb1, 0xcd, 0x3a, 0xf1, 0x82, 0x37, 0x38, 0x2a, 0x3a,
		0xca, 0x59, 0x81, 0x97, 0xf3, 0x71, 0xc2, 0xeb, 0xae, 0x0e, 0x91, 0x39, 0x4a, 0x55, 0x29, 0x27,
		0x9b, 0x61, 0x8f, 0x6a, 0x69, 0xfb, 0xbb, 0xd4, 0x31, 0x90, 0xd3, 0x90, 0xc4, 0x17, 0x15, 0xd8,
		0x3d, 0x86, 0x73, 0xb1, 0x32, 0x03, 0xb2, 0x62, 0x58, 0x3e, 0x97, 0x0f, 0x7c, 0x3a, 0xa5, 0x6b,
		0x98, 0x8d, 0xca, 0x23, 0xa7, 0x4c, 0xe5, 0x61, 0xe5, 0x63, 0xc9, 0x87, 0x7a, 0x3b, 0x54, 0x2c,
		0xff, 0x1b, 0xd7, 0x4a, 0x52, 0x55, 0x75, 0xa4, 0xa1, 0x99, 0x14, 0x2d, 0xe5, 0xdd, 0xa7, 0x96,
		0x3c, 0xc7, 0x12, 0xf4, 0x30, 0x04, 0x49, 0xc9, 0x01, 0x5b, 0x89, 0x50, 0x36, 0xfc, 0x08, 0xcb,
		0x8f, 0x1a, 0x39, 0xc7, 0x9f, 0x5e, 0x83, 0x55, 0xdb, 0x29, 0xb8, 0xca, 0xc8, 0xb7, 0xc6, 0xe5,
		0xab, 0x48, 0x9f, 0x7c, 0x6e, 0xc0, 0x57, 0x1d, 0x5a, 0x2d, 0xee, 0xf8, 0x92, 0xe0, 0xa2, 0x2f,
		0xb2, 0x95, 0xbb, 0x17, 0xe5, 0x79, 0x4f, 0x4b, 0x60, 0x78, 0x96, 0xb9, 0xb2, 0x62, 0x21, 0x59,
		0xee, 0x16, 0x05, 0x3a, 0x1e, 0x42, 0xd1, 0x9c, 0xcb, 0xea, 0xe2, 0x47, 0x70, 0xe0, 0x91, 0x82,
		0x68, 0x12, 0x8d, 0xae, 0xcb, 0xc4, 0xdf, 0x57, 0x65, 0x58, 0x16, 0x20, 0x74, 0x83, 0xca, 0x56,
		0xfe, 0xcc, 0xab, 0x3b, 0xa9, 0x4e, 0xa7, 0x10, 0x9d, 0xf1, 0x76, 0x7c, 0xff, 0x90, 0x4d, 0x8d,
		0x2d, 0xa4, 0xa9, 0x76, 0x7c, 0xc3, 0x89, 0xfb, 0x16, 0xa0, 0xe8, 0x4e, 0xf3, 0xc3, 0xfe, 0x89,
		0xba, 0x6a, 0x1a, 0xa3, 0x76, 0x68, 0x95, 0x19, 0x3f, 0xf7, 0x19, 0x53, 0x28, 0xbd, 0x75, 0xc1,
		0xd4, 0xa5, 0x60, 0xa6, 0x66, 0x1e, 0xcd, 0xa0, 0x12, 0x3b, 0x03, 0x56, 0x21, 0xcf, 0xb2, 0x9b,
		0xfd, 0x57, 0xc3, 0x31, 0x82, 0x21, 0x72, 0x6c, 0x21, 0xe8, 0x8c, 0x59, 0xd4, 0x04, 0x18, 0xe2,
		0x72, 0x15, 0xc9, 0x57, 0x18, 0x29, 0x26, 0x5d, 0xbc, 0xe1, 0xae, 0x95, 0x84, 0x79, 0x15, 0x26,
		0x97, 0xaf, 0x53, 0x29, 0xb7, 0x20, 0xdc, 0xc8, 0xd5, 0x48, 0xb0, 0x4c, 0x07, 0xc3, 0xb0, 0xa4,
		0x1f, 0x19, 0xa3, 0x36, 0xdd, 0x94, 0x73, 0x8b, 0x8a, 0xff, 0x3a, 0x27, 0x2f, 0x36, 0x77, 0x8e,
		0x2b, 0xab, 0x0d, 0xa6, 0x33, 0x68, 0xd3, 0xf0, 0xf3, 0x70, 0xf4, 0x7b, 0x91, 0xe6, 0xbb, 0xc2,
		0xfe, 0x1f, 0x5d, 0x05, 0x96, 0x84, 0x2f, 0xed, 0xd3, 0xa8, 0x84, 0x0e, 0x9f, 0x8a, 0xc6, 0x42,
		0xe8, 0xf9, 0x84, 0xfd, 0x76, 0xd6, 0xd2, 0x3b, 0x5a, 0x2a, 0x88, 0xe9, 0xb3, 0x57, 0xc5, 0x2a,
		0x79, 0x4b, 0xc9, 0x21, 0x3f, 0x7f, 0xaa, 0xa1, 0x89, 0x33, 0x4b, 0xfc, 0xd1, 0x77, 0x6c, 0x90,
		0xf0, 0x31, 0xdd, 0x10, 0xbd, 0xe2, 0x91, 0x7c, 0x00, 0xd8, 0x10, 0xbe, 0xe3, 0x84, 0xc2, 0x90,
		0x64, 0xe2, 0x6a, 0x28, 0xa1, 0x2c, 0x4d, 0xe7, 0x3d, 0x9f, 0x6c, 0x59, 0x5f, 0xdb, 0xd3, 0x83,
		0x3f, 0x5b, 0xb1, 0x07, 0x23, 0x65, 0xbb, 0x39, 0x5b, 0x25, 0x44, 0xe9, 0x3b, 0xd8, 0x36, 0x80,
		0xb8, 0x5c, 0x5a, 0xf2, 0x8d, 0x7b, 0x2f, 0xa6, 0xf5, 0x1e, 0xdc, 0xe9, 0x47, 0xea, 0x1a, 0x90,
		0x38, 0x1b, 0xd5, 0x12, 0xe6, 0xff, 0x89, 0xff, 0x63, 0x29, 0xa0, 0xf2, 0x26, 0x4f, 0x5f, 0x03,
		0xd3, 0xda, 0xca, 0xae, 0xaf, 0x6e, 0x49, 0xd4, 0x29, 0x0f, 0x2b, 0x93, 0xcf, 0x06, 0x2d, 0x8b,
		0x1e, 0xed, 0xef, 0xaf, 0xaa, 0xb8, 0xe6, 0x48, 0x86, 0x0a, 0xc6, 0x8c, 0x06, 0xe1, 0x9a, 0xe3,
		0x17, 0x4b, 0xb0, 0x64, 0x97, 0x55, 0x40, 0x95, 0x44, 0x00, 0x68, 0x61, 0xd0, 0x39, 0x91, 0xa3,
		0xe7, 0x75, 0x4a, 0xc8, 0xab, 0x37, 0xa6, 0x06, 0xbb, 0xf5, 0x03, 0xc1, 0x8a, 0x5d, 0xc1, 0x07,
		0xfb, 0x9d, 0xc0, 0xc4, 0x9c, 0x14, 0x3d, 0x2f, 0xd8, 0x17, 0xfa, 0x23, 0x5a, 0x8f, 0x8a, 0x68,
		0x7e, 0x01, 0x14, 0xfe, 0x80, 0x19, 0x14, 0x1a, 0x6c, 0xc6, 0x55, 0x1a, 0x64, 0x5d, 0x53, 0x1f,
		0x02, 0x3e, 0x43, 0x3a, 0xbd, 0xec, 0x27, 0xb4, 0x51, 0x82, 0x49, 0x9c, 0x48, 0x96, 0x89, 0x2d,
		0xc6, 0xc1, 0x5f, 0x04, 0xd1, 0x88, 0x18, 0x89, 0xc5, 0xc0, 0xca, 0xd2, 0x8b, 0x91, 0xca, 0xa8,
		0xff, 0x43, 0xdc, 0xa7, 0x3b, 0x29, 0xac, 0x17, 0xd2, 0xf7, 0xed, 0xad, 0xe7, 0x2b, 0x27, 0xab,
		0xbe, 0xa6, 0x49, 0x41, 0x9f, 0xc5, 0x92, 0x57, 0x05, 0x5b, 0xf2, 0x77, 0xd4, 0xd5, 0xf6, 0xc9,
		0x9a, 0x75, 0xed, 0xf1, 0x6a, 0x9b, 0x2b, 0x12, 0xaf, 0x63, 0x24, 0x93, 0x7d, 0x16, 0x41, 0x00,
		0xfb, 0xb4, 0x56, 0x06, 0x02, 0x33, 0xb8, 0x4b, 0xb2, 0x0b, 0x76, 0xc4, 0xb3, 0x70, 0xe4, 0xad,
		0x67, 0x68, 0x2f, 0xa5, 0x72, 0x8d, 0xe2, 0xbd, 0x15, 0x77, 0x9a, 0xe2, 0x12, 0x80, 0x58, 0x4b,
		0x86, 0x97, 0xb6, 0xbf, 0xdd, 0xff, 0x37, 0x7f, 0xe0, 0x83, 0x23, 0x0b, 0xd6, 0xbc, 0xc5, 0xce,
		0x3e, 0x96, 0xa5, 0x94, 0xf0, 0x20, 0x9b, 0xf8, 0xdc, 0xfb, 0xf7, 0x80, 0xde, 0x07, 0x8c, 0x73,
		0xf4, 0x81, 0x70, 0x5d, 0xc8, 0x18, 0x8e, 0x8a, 0x31, 0xe2, 0x8d, 0x28, 0x30, 0x66, 0xac, 0x57,
		0x23, 0x4a, 0x9b, 0x34, 0xc4, 0x05, 0x9f, 0x6d, 0xcc, 0xa2, 0xa9, 0x66, 0x12, 0xf9, 0x8a, 0x9e,
		0x07, 0x7b, 0xc7, 0x79, 0x2b, 0x10, 0x35, 0x32, 0x8c, 0x81, 0xdb, 0x4e, 0x1b, 0xc6, 0x96, 0xa1,
		0x60, 0x65, 0xfd, 0x9a, 0xd4, 0xcb, 0x7f, 0x15, 0xad, 0xc2, 0xcc, 0x44, 0x66, 0x59, 0xed, 0x8f,
		0x88, 0x42, 0x11, 0xfa, 0x13, 0xb0, 0xa5, 0x34, 0x47, 0x9b, 0x33, 0x34, 0xb2, 0x60, 0x62, 0x94,
		0xad, 0xea, 0x96, 0xf1, 0x22, 0x12, 0x64,
	}},
}

func factory(s string) format.Format {
	return qr.New(s)
}

func TestFormat_OutputFileName(t *testing.T) {
	formatAssert.Name(t, nameTests, factory)
}

func TestFormat_Reader(t *testing.T) {
	_, err := factory("").Reader(bytes.NewReader([]byte{}))
	assert.Error(t, err)
}

func TestFormat_Writer(t *testing.T) {
	goldie.FileNameSuffix = ".png"
	for _, test := range dataTests {
		name := fmt.Sprintf("%x", md5.Sum(test.data))
		t.Run(name, func(t *testing.T) {
			out := &bytes.Buffer{}
			w, cl, err := factory("").Writer(out)
			assert.NoError(t, err)
			_, err = w.Write(test.data)
			assert.NoError(t, err)
			for i := len(cl); i > 0; i-- {
				err = cl[i-1].Close()
				assert.NoError(t, err)
			}
			goldie.Assert(t, name, out.Bytes())
		})
	}

	t.Run("max data", func(t *testing.T) {
		w, cl, err := factory("").Writer(ioutil.Discard)
		assert.NoError(t, err)
		r := io.LimitReader(rand.Reader, 2119)
		_, err = io.Copy(w, r)
		assert.NoError(t, err)
		for i := len(cl); i > 0; i-- {
			err = cl[i-1].Close()
			assert.NoError(t, err)
		}
	})

	t.Run("too much data", func(t *testing.T) {
		w, cl, err := factory("").Writer(ioutil.Discard)
		assert.NoError(t, err)
		r := io.LimitReader(rand.Reader, 2120)
		_, err = io.Copy(w, r)
		for i := len(cl); i > 0; i-- {
			e := cl[i-1].Close()
			if e != nil {
				err = e
			}
		}
		assert.Error(t, err)
	})
}

func TestFormat_Name(t *testing.T) {
	assert.Equal(t, qr.Name, qr.New("").Name())
}
